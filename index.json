[{"content":"欢迎来到我的博客！\n这是我的第一篇文章，我将在这里分享我的学习和经验。\n二级标题 列表项1 列表项2 列表项3 感谢阅读！\n","permalink":"https://zhangquanhua1.github.io/posts/my-first-post/","summary":"我的第一篇博客文章，介绍我的博客和分享计划","title":"My First Post"},{"content":"Linux内核进程调度机制详解 概述 进程调度是操作系统的核心功能之一，负责决定哪个进程在何时使用CPU资源。Linux内核的调度器经过多次演进，从O(1)调度器到CFS（完全公平调度器），不断优化调度性能和公平性。\n调度器的基本概念 1. 调度目标 公平性：\n每个进程都有机会获得CPU时间 避免进程饥饿现象 效率性：\n减少调度开销 提高系统吞吐量 响应性：\n交互式进程快速响应 实时进程及时处理 2. 调度策略 SCHED_NORMAL：\n普通进程的默认策略 基于时间片轮转 SCHED_FIFO：\n先进先出实时调度 高优先级进程优先执行 SCHED_RR：\n轮转实时调度 同优先级进程轮流执行 SCHED_BATCH：\n批处理调度 适合CPU密集型任务 SCHED_IDLE：\n空闲调度 只在系统空闲时运行 CFS调度器详解 1. 核心思想 CFS（Completely Fair Scheduler）基于虚拟运行时间的概念：\n虚拟运行时间 = 实际运行时间 / 进程权重 公平性保证：\n所有进程的虚拟运行时间应该相等 权重高的进程获得更多CPU时间 2. 红黑树实现 CFS使用红黑树来维护可运行进程：\nstruct rb_root cfs_rq-\u0026gt;tasks_timeline; struct rb_node *rb_leftmost; 插入操作：\n按虚拟运行时间排序 最左边的节点是下一个要运行的进程 删除操作：\n进程运行后从树中删除 重新计算虚拟运行时间后重新插入 3. 时间片分配 动态时间片：\n基于系统负载动态调整 避免固定时间片的问题 最小粒度：\n防止频繁切换 保证调度效率 调度器实现细节 1. 调度队列 struct cfs_rq { struct load_weight load; unsigned long nr_running; u64 min_vruntime; struct rb_root tasks_timeline; struct rb_node *rb_leftmost; struct sched_entity *curr; struct sched_entity *next; }; 2. 调度实体 struct sched_entity { struct load_weight load; struct rb_node run_node; struct list_head group_node; unsigned int on_rq; u64 exec_start; u64 sum_exec_runtime; u64 vruntime; u64 prev_sum_exec_runtime; }; 3. 调度函数 pick_next_task()：\nstatic struct task_struct *pick_next_task_fair(struct rq *rq) { struct cfs_rq *cfs_rq = \u0026amp;rq-\u0026gt;cfs; struct sched_entity *se; se = pick_next_entity(cfs_rq); if (!se) return NULL; return task_of(se); } 实时调度 1. RT调度器 优先级管理：\n实时进程优先级高于普通进程 优先级范围：1-99（数字越大优先级越高） 调度策略：\nSCHED_FIFO：抢占式，直到主动让出CPU SCHED_RR：时间片轮转，同优先级轮流执行 2. 抢占机制 内核抢占：\n允许高优先级进程抢占低优先级进程 提高实时性能 用户抢占：\n从内核态返回用户态时检查 确保实时进程及时响应 负载均衡 1. 多核调度 负载分布：\n将进程分散到不同CPU核心 避免单个核心过载 NUMA感知：\n考虑内存访问延迟 优先在本地节点调度 2. 负载迁移 主动迁移：\n定期检查负载分布 主动迁移进程平衡负载 被动迁移：\n进程唤醒时选择合适CPU 避免热点CPU 性能优化 1. 缓存友好 CPU亲和性：\n进程倾向于在同一CPU上运行 提高缓存命中率 NUMA优化：\n内存分配与CPU节点匹配 减少跨节点访问 2. 调度开销优化 快速路径：\n常见情况快速处理 减少不必要的计算 延迟敏感：\n交互式进程优先调度 减少响应延迟 调试和监控 1. 调度统计 /proc/schedstat：\n调度器运行统计 负载均衡信息 /proc/sched_debug：\n详细调度信息 调试调度问题 2. 性能分析 perf sched：\n调度事件分析 性能瓶颈识别 ftrace：\n调度函数跟踪 实时性能监控 总结 Linux内核的进程调度机制是一个复杂而精密的系统：\nCFS调度器：保证公平性和效率 实时调度：满足实时性要求 负载均衡：充分利用多核资源 性能优化：减少调度开销 理解调度机制对于系统编程和性能优化都是非常重要的基础知识。\n","permalink":"https://zhangquanhua1.github.io/posts/linux-kernel/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E6%9C%BA%E5%88%B6/","summary":"深入解析Linux内核的进程调度机制，包括调度策略、调度器实现和性能优化","title":"Linux内核进程调度机制详解"},{"content":"股票技术分析入门指南 什么是技术分析？ 技术分析是通过研究历史价格和交易量数据来预测未来价格走势的分析方法。它基于市场行为反映一切信息的假设，通过图表和指标来识别市场趋势和交易机会。\n技术分析的基本假设 1. 市场行为反映一切信息 价格已经包含了所有已知信息 基本面、消息面都会在价格中体现 2. 价格按趋势运动 价格运动具有趋势性 趋势一旦形成，会持续一段时间 3. 历史会重演 市场行为模式会重复出现 投资者心理具有规律性 常用技术分析工具 1. K线图（蜡烛图） K线构成：\n实体：开盘价和收盘价之间的区域 上影线：最高价到实体的距离 下影线：最低价到实体的距离 基本形态：\n阳线：收盘价高于开盘价（通常为红色或白色） 阴线：收盘价低于开盘价（通常为绿色或黑色） 2. 移动平均线（MA） 常用周期：\n短期：5日、10日、20日 中期：30日、60日 长期：120日、250日 应用方法：\n金叉：短期均线上穿长期均线，买入信号 死叉：短期均线下穿长期均线，卖出信号 支撑阻力：均线作为价格支撑或阻力位 3. 相对强弱指数（RSI） 计算方法：\nRSI = 100 - (100 / (1 + RS)) RS = 平均上涨点数 / 平均下跌点数 使用规则：\n超买区：RSI \u0026gt; 70，可能回调 超卖区：RSI \u0026lt; 30，可能反弹 背离：价格创新高而RSI未创新高，可能见顶 4. MACD指标 构成要素：\nDIF线：快速EMA - 慢速EMA DEA线：DIF的移动平均 MACD柱：DIF - DEA 交易信号：\n金叉：DIF上穿DEA，买入信号 死叉：DIF下穿DEA，卖出信号 背离：价格与MACD走势不一致 常见技术形态 1. 反转形态 头肩顶/底：\n三个峰/谷，中间最高/最低 颈线突破确认反转 双顶/双底：\n两个相近的高点/低点 突破颈线确认形态 2. 持续形态 三角形：\n收敛的价格区间 突破方向决定后续走势 旗形/三角旗：\n短暂整理后延续原趋势 成交量配合确认 实战应用技巧 1. 多重确认 不要单一指标判断 结合多个技术工具 考虑成交量配合 2. 风险控制 设置止损位 控制仓位大小 避免追涨杀跌 3. 时间周期 短期：日内、周内交易 中期：周线、月线分析 长期：月线、季线趋势 技术分析的局限性 1. 滞后性 指标基于历史数据 可能错过最佳时机 2. 假信号 市场噪音干扰 需要经验判断 3. 市场环境变化 不同市场环境适用性不同 需要灵活调整策略 总结 技术分析是股票投资的重要工具，但需要：\n系统学习：掌握基本概念和常用指标 实践练习：在模拟环境中练习 经验积累：通过实战积累经验 风险控制：始终把风险控制放在首位 记住：技术分析只是辅助工具，不能完全依赖，还需要结合基本面分析和其他因素综合判断。\n","permalink":"https://zhangquanhua1.github.io/posts/%E8%82%A1%E7%A5%A8/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/","summary":"详细介绍股票技术分析的基本概念、常用指标和实战应用方法","title":"股票技术分析入门指南"},{"content":"核心比喻 集中竞价：像 \u0026ldquo;集体投票，一锤定音\u0026rdquo;。大家先各自出价，但都不交易，等到一个特定时刻，系统找一个能让最多交易成交的价格，统一按这个价格成交。\n连续竞价：像 \u0026ldquo;自由市场，随到随谈\u0026rdquo;。买卖双方你挂一个买单，我挂一个卖单，价格合适就立刻成交，交易是连续不断进行的。\n一、集中竞价 集中竞价发生在两个特定的时间段，其目的是为了产生一个公平的、能反映市场集中意愿的开盘价或收盘价。\n1. 发生时间：\n开盘集合竞价：每个交易日的 9:15 - 9:25\n收盘集合竞价：每个交易日的 14:57 - 15:00 （注意：目前仅深圳证券交易所、创业板、科创板采用，上海证券交易所的收盘价是最后一笔连续竞价的成交价）\n2. 核心规则与过程：\n收集申报：在以上时间段内，投资者可以提交或撤销买卖委托（但9:20-9:25之间只能提交，不能撤销）。\n不立即成交：在此期间，所有的报单只会被系统收集，并不会真正成交。\n集中撮合：在时间点结束时（9:25或15:00），交易系统的电脑主机将所有有效的买卖申报一次性集中撮合。\n成交价确定原则：这个\u0026quot;唯一价格\u0026quot;必须同时满足以下三个条件（优先级从高到低）：\n最大成交量原则：在这个价格下，所能成交的股票数量最多。\n高于该价格的所有买盘和低于该价格的所有卖盘都能全部成交。\n与该价格相同的买卖双方中有一方申报全部成交。\n3. 举个例子（开盘集合竞价）：\n假设某股票前收盘价为10.00元。在9:15-9:25期间，大家纷纷挂单：\n有人愿以10.10元买入500手\n有人愿以10.05元买入800手\n有人愿以10.00元买入1000手\n有人愿以10.00元卖出600手\n有人愿以10.05元卖出700手\n有人愿以10.10元卖出900手\n系统会尝试10.10元、10.05元、10.00元等多个价格，计算在每个价格下能成交多少手。最终发现，在10.05元这个价格时，能实现的成交量最大（例如800手）。那么，10.05元就被确定为当日的开盘价。所有符合条件（买单价≥10.05元，卖单价≤10.05元）的委托单都按10.05元成交。\n4. 特点总结：\n价格唯一：形成一个统一的价格（开盘价/收盘价）。\n时间驱动：到点了才统一处理。\n防止操纵：收盘集合竞价能有效防止在收盘最后一刻通过大幅拉抬或打压股价来操纵收盘价的行为。\n二、连续竞价 连续竞价是交易日中最主要的交易方式，我们平时看盘时的实时价格波动就是在连续竞价中产生的。\n1. 发生时间：\n早市：9:30 - 11:30 （开盘集合竞价结束后立即开始）\n午市：13:00 - 14:57 （对于有收盘集合竞价的深市等）\n2. 核心规则：\n价格优先：较高的买进申报优先于较低的买进申报；较低的卖出申报优先于较高的卖出申报。\n时间优先：同价位的申报，谁先提交订单（挂单早），谁就优先成交。\n3. 成交过程：\n新进入的买单会与卖单队列中价格最低的卖单（卖一）比较。\n新进入的卖单会与买单队列中价格最高的买单（买一）比较。\n只要报单价格匹配（买价 ≥ 卖价），就立即成交。\n4. 举个例子：\n假设某股票实时五档行情为：\n卖五 \u0026hellip; 10.10\n卖四 \u0026hellip; 10.09\n","permalink":"https://zhangquanhua1.github.io/posts/%E8%82%A1%E7%A5%A8/%E9%9B%86%E4%B8%AD%E7%AB%9E%E4%BB%B7%E4%B8%8E%E8%BF%9E%E7%BB%AD%E7%AB%9E%E4%BB%B7/","summary":"详细解析股票市场中的集中竞价和连续竞价机制，帮助投资者理解交易规则","title":"集中竞价与连续竞价详解"},{"content":"股票基础知识入门 什么是股票？ 股票是股份公司发行的所有权凭证，代表股东对公司的所有权。当你购买一家公司的股票时，你就成为了该公司的股东，享有相应的权利和义务。\n股票的基本特征 1. 所有权凭证 持有股票意味着拥有公司的一部分 股东享有分红权、投票权等权利 2. 收益性 分红收益：公司盈利时可能获得现金分红 资本增值：股价上涨带来的收益 3. 风险性 股价可能下跌 公司可能亏损或破产 市场波动风险 4. 流动性 股票可以在二级市场自由买卖 交易时间：周一至周五 9:30-11:30, 13:00-15:00 股票交易基本规则 交易单位 手：1手 = 100股 最小交易单位：1手 价格限制 涨跌停板：普通股票涨跌幅限制为10% ST股票：涨跌幅限制为5% 交易费用 佣金：券商收取，一般为成交金额的万分之几 印花税：卖出时收取，税率为0.1% 过户费：上海证券交易所收取 投资策略建议 1. 价值投资 关注公司基本面 长期持有优质股票 注重安全边际 2. 分散投资 不要把所有资金投入单一股票 构建投资组合降低风险 跨行业、跨市场配置 3. 风险控制 设置止损点 控制单只股票仓位 保持理性投资心态 常见投资误区 1. 追涨杀跌 盲目跟风热门股票 情绪化交易决策 2. 过度交易 频繁买卖增加成本 忽视长期投资价值 3. 缺乏研究 不分析公司基本面 仅凭消息或推荐投资 总结 股票投资是一门需要不断学习和实践的学问。作为初学者，建议：\n学习基础知识：理解股票的基本概念和交易规则 小额试水：用少量资金开始实践 持续学习：关注市场动态，学习投资技巧 保持理性：控制风险，避免情绪化交易 记住：投资有风险，入市需谨慎！\n","permalink":"https://zhangquanhua1.github.io/posts/%E8%82%A1%E7%A5%A8/%E8%82%A1%E7%A5%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","summary":"股票投资的基础知识，包括股票定义、交易规则、风险控制等核心概念","title":"股票基础知识入门"},{"content":"Linux内核内存管理基础 概述 Linux内核的内存管理是操作系统中最复杂和最重要的子系统之一。它负责管理系统的物理内存和虚拟内存，为进程提供内存分配、保护和共享服务。\n内存管理的基本概念 1. 虚拟内存与物理内存 虚拟内存：\n进程看到的地址空间 每个进程都有独立的虚拟地址空间 提供内存保护和隔离 物理内存：\n实际的硬件内存 通过页表映射到虚拟地址 由内核统一管理 2. 页表机制 页表是虚拟内存到物理内存的映射表：\n虚拟地址 → 页表查询 → 物理地址 多级页表结构：\n减少页表占用的内存空间 支持稀疏地址空间 提高地址转换效率 内存分配机制 1. 伙伴系统（Buddy System） 用于管理物理内存页的分配：\n分配单位：页框（Page Frame），通常4KB 分配策略：按2的幂次分配，减少内存碎片 合并机制：释放时与相邻空闲块合并 2. Slab分配器 用于内核对象的快速分配：\n缓存机制：预分配常用大小的对象 着色技术：减少CPU缓存冲突 对象复用：避免频繁的初始化开销 3. 用户空间内存分配 malloc() 实现：\n小内存：使用brk()系统调用 大内存：使用mmap()系统调用 内存池：减少系统调用开销 内存保护机制 1. 页级保护 每个页表项包含保护位：\n读权限：控制页面是否可读 写权限：控制页面是否可写 执行权限：控制页面是否可执行 2. 地址空间隔离 进程隔离：不同进程的地址空间完全独立 内核保护：用户进程无法直接访问内核空间 内存映射：通过mmap()实现文件映射 内存回收机制 1. 页面置换算法 LRU（最近最少使用）：\n优先回收长时间未访问的页面 维护访问时间戳 支持多种LRU变体 2. 交换机制 交换分区：\n将不常用的页面写入磁盘 释放物理内存 需要时再读回内存 3. 内存压缩 zswap/z3fold：\n压缩不常用页面 减少交换I/O 提高内存利用率 内存管理API 1. 内核空间分配 // 分配页面 struct page *alloc_pages(gfp_t gfp_mask, unsigned int order); // 分配连续物理内存 void *kmalloc(size_t size, gfp_t flags); // 分配大块内存 void *vmalloc(unsigned long size); 2. 用户空间分配 // 系统调用 void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); // 调整堆大小 int brk(void *addr); 性能优化 1. 大页支持 Huge Pages：\n减少页表项数量 提高TLB命中率 减少地址转换开销 2. NUMA优化 NUMA感知分配：\n优先在本地节点分配内存 减少跨节点访问延迟 提高内存访问性能 3. 内存预取 预取机制：\n预测内存访问模式 提前加载数据到缓存 减少内存访问延迟 调试和监控 1. 内存泄漏检测 kmemleak：检测内核内存泄漏 valgrind：检测用户空间内存问题 内存统计：通过/proc/meminfo监控 2. 性能分析 perf：内存访问性能分析 ftrace：内存分配跟踪 内存压力测试：验证内存管理稳定性 总结 Linux内核的内存管理是一个复杂而精密的系统，它通过多种机制和算法来高效地管理系统的内存资源。理解内存管理机制对于系统编程和内核开发都是非常重要的基础知识。\n关键要点：\n虚拟内存提供地址空间隔离和保护 多种分配器满足不同需求 内存回收确保系统稳定运行 性能优化提升系统整体效率 ","permalink":"https://zhangquanhua1.github.io/posts/linux-kernel/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/","summary":"深入理解Linux内核的内存管理机制，包括虚拟内存、物理内存、页表等核心概念","title":"Linux内核内存管理基础"}]